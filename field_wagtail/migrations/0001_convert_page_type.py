# Generated by Django 2.1.7 on 2019-03-13 13:59
'''
Converts wagtail pages created with deprecated package and model
    kdl_wagtail_page.models.RichPage
Into the new reusable kdl package and model
    kdl_wagtail.core.models.RichTextPage
'''
from django.db import migrations
from django.contrib.contenttypes.models import ContentType


def convert_pages(apps, schema_editor):
    def copy(page_from, page_to):
        # page_to.body = page_from.body
        pass

    mapping = {
        'models': {
            'from': ('kdl_wagtail_page', 'RichPage'),
            'to': ('kdl_wagtail_core', 'RichTextPage'),
        },
        'copy': copy,
    }
    _convert_pages(apps, schema_editor, mapping)

    # raise Exception('ROLLBACK')


def _convert_pages(apps, schema_editor, mapping):
    '''
    Fairly generic method to convert all instances of one direct subtype
    of wagtail page into another.

    This is supposed to be called from data migration.

    All fields with the names are automatically copied. Other fields and
    custom transforms can be done in custom copy function passed to 'mapping'
    dictionary.

    Example:

    def copy(page_from, page_to):
        page_to.fieldA = page_from.fieldB

    mapping = {
        'models': {
            'from': ('kdl_wagtail_page', 'RichPage'),
            'to': ('kdl_wagtail_core', 'RichTextPage'),
        },
        'copy': copy,
    }

    '''

    PageFrom = apps.get_model(*mapping['models']['from'])
    PageTo = apps.get_model(*mapping['models']['to'])

    content_type_to = ContentType.objects.filter(
        app_label=mapping['models']['to'][0],
        model=mapping['models']['to'][1].lower()
    ).first()

    pages_to = []

    for page_from in PageFrom.objects.all():
        page_to = PageTo()

        # naive conversion: we copy all the fields which have a common name
        # this will at least copy all the fields from Page table
        for field in page_to._meta.get_fields():
            # print(field, field.name)

            # if field.name in ['id', 'pk']:
            #    continue

            # Ignore reverse relations
            if field.auto_created:
                continue

            # Ignore m2m relations - they will be copied as child objects
            # if modelcluster supports them at all (as it does for tags)
            if field.many_to_many:
                continue

            if hasattr(page_from, field.name):
                setattr(page_to, field.name, getattr(
                    page_from, field.name, None
                ))

        # particular cases
        page_to.id = page_from.id
        page_to.page_ptr_id = page_from.page_ptr_id
        page_to.content_type_id = content_type_to.pk

        # custom copy
        mapping['copy'](page_from, page_to)

        pages_to.append(page_to)

    # Remove all the converted page
    # we use a raw statement instead of .delete() because we want to keep
    # the parent Page record.
    # TODO: for large number of ids, we might need to process this in chunk.
    # NOTE: we don't delete everything, in the future we might want to support
    # selective conversion (i.e. a filter on the PageFrom query set above).
    page_from_ids = [
        int(v) for v in
        PageFrom.objects.all().values_list('page_ptr_id', flat=True)
    ]
    from django.db import connection
    with connection.cursor() as cursor:
        cursor.execute(
            'DELETE FROM {} WHERE page_ptr_id = ANY(%s)'.format(
                PageFrom._meta.db_table),
            [page_from_ids]
        )

    # now we can save the converted pages (without duplicate values)
    for page_to in pages_to:
        page_to.save()


class Migration(migrations.Migration):

    dependencies = [
        ('kdl_wagtail_page', '0001_initial'),
        ('kdl_wagtail_core', '0008_form_fields_order'),
    ]

    operations = [
        migrations.RunPython(convert_pages),
    ]
